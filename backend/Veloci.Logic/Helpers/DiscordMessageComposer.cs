using System.Globalization;
using System.Text;
using Veloci.Data.Domain;
using Veloci.Logic.Bot;
using Veloci.Logic.Services.YearResults;

namespace Veloci.Logic.Helpers;

public class DiscordMessageComposer
{
    public string TimeUpdate(IEnumerable<TrackTimeDelta> deltas)
    {
        var messages = deltas.Select(TimeUpdate);
        return string.Join($"{Environment.NewLine}{Environment.NewLine}", messages);
    }

    public string StartCompetition(Track track)
    {
        var rating = string.Empty;

        if (track.Rating?.Value is not null)
        {
            rating = $"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥: **{Math.Round(track.Rating.Value.Value, 1):F1}**/3{Environment.NewLine}{Environment.NewLine}";
        }

        return $"## üìÖ  –í—ñ—Ç–∞—î–º–æ –Ω–∞ —â–æ–¥–µ–Ω–Ω–æ–º—É **UA Velocidrone Battle**!{Environment.NewLine}{Environment.NewLine}" +
               $"–¢—Ä–µ–∫ –¥–Ω—è:{Environment.NewLine}" +
               $"{track.Map.Name} - **{track.Name}**{Environment.NewLine}{Environment.NewLine}" +
               $"{rating}" +
               $"[Velocidrone leaderboard](https://www.velocidrone.com/leaderboard/{track.Map.MapId}/{track.TrackId}/All){Environment.NewLine}‚†Ä";
    }

    public BotPoll Poll(string trackName)
    {
        var question = $"–û—Ü—ñ–Ω—ñ—Ç—å —Ç—Ä–µ–∫ {trackName}{Environment.NewLine}{Environment.NewLine}" +
               $"–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ —Ç—Ä–µ–∫–∏!";

        var options = new List<BotPollOption>
        {
            new (3, "–û–¥–∏–Ω —ñ–∑ –∫—Ä–∞—â–∏—Ö"),
            new (2, "–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è"),
            new (1, "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π"),
            new (-1, "–ù–µ –¥—É–∂–µ"),
            new (-2, "–õ–∞–π–Ω–æ")
        };

        return new BotPoll
        {
            Question = question,
            Options = options
        };
    }

    public string BadTrackRating()
    {
        return "üòî –ë–∞—á—É —Ç—Ä–µ–∫ –Ω–µ —Å–ø–æ–¥–æ–±–∞–≤—Å—è. –ë—ñ–ª—å—à–µ –π–æ–≥–æ –Ω–µ –±—É–¥–µ";
    }

    public string TempLeaderboard(List<CompetitionResults>? results)
    {
        var message = $"### üßê Leaderboard:{Environment.NewLine}";

        if (results is null || results.Count == 0)
        {
            return $"{message}```–ß–µ–∫–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏```";
        }

        var rows = TempLeaderboardRows(results);
        return $"{message}" +
               $"```{string.Join($"{Environment.NewLine}", rows)}```";
    }

    public string Leaderboard(IEnumerable<CompetitionResults> results)
    {
        var rows = results.Select(LeaderboardRow);
        var divider = Environment.NewLine;
        return $"### üèÜ Leaderboard{Environment.NewLine}" +
               $"{string.Join($"{divider}", rows)}";
    }

    public string TempSeasonResults(IEnumerable<SeasonResult> results, bool includeExtraNewLine = true)
    {
        var rows = results.Select(TempSeasonResultsRow);
        var divider = includeExtraNewLine ? $"{Environment.NewLine}{Environment.NewLine}" : Environment.NewLine;
        return $"## üóì –ü—Ä–æ–º—ñ–∂–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º—ñ—Å—è—Ü—è{Environment.NewLine}{Environment.NewLine}" +
               $"{string.Join($"{divider}", rows)}" +
               $"{Environment.NewLine}{Environment.NewLine}‚†Ä";
    }

    public string SeasonResults(IEnumerable<SeasonResult> results)
    {
        var rows = results.Select(SeasonResultsRow);
        return $"# üèÅ –§—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º—ñ—Å—è—Ü—è{Environment.NewLine}{Environment.NewLine}" +
               $"{string.Join($"{Environment.NewLine}{Environment.NewLine}", rows)}" +
               $"{Environment.NewLine}{Environment.NewLine}‚†Ä";
    }

    public string MedalCount(IEnumerable<SeasonResult> results, bool includeExtraNewLine = true)
    {
        var rows = results
            .Select(MedalCountRow)
            .Where(row => row is not null);

        var divider = includeExtraNewLine ? $"{Environment.NewLine}{Environment.NewLine}" : Environment.NewLine;

        return $"## –ú–µ–¥–∞–ª—ñ –∑–∞ –º—ñ—Å—è—Ü—å{Environment.NewLine}{Environment.NewLine}" +
               $"{string.Join($"{divider}", rows)}";
    }

    public IEnumerable<string> YearResults(YearResultsModel model)
    {
        var first = $"üéâ *UA Velocidrone Battle WRAPPED üìà {model.Year}*{Environment.NewLine}" +
               $"–∞–±–æ —Ç—Ä–æ—Ö–∏ —Ü–∏—Ñ—Ä –∑–∞ –º–∏–Ω—É–ª–∏–π —Ä—ñ–∫{Environment.NewLine}{Environment.NewLine}" +
               $"üìä *{model.TotalTrackCount} —Ç—Ä–µ–∫—ñ–≤!* –¶–µ —Å—Ç—ñ–ª—å–∫–∏ –º–∏ –ø—Ä–æ–ª–µ—Ç—ñ–ª–∏ –º–∏–Ω—É–ª–æ–≥–æ —Ä–æ–∫—É.{Environment.NewLine}" +
               $"–Ü–∑ –Ω–∏—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö - *{model.UniqueTrackCount}*. –¢–∞–∫, –¥–µ—è–∫—ñ —Ç—Ä–µ–∫–∏ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–ª–∏—Å—å, –∞–ª–µ —Ç–∞–∫—ñ –≤–∂–µ —É –Ω–∞—Å –∞–ª–≥–æ—Ä–∏—Ç–º–∏.{Environment.NewLine}" +
               $"–ó —ñ–Ω—à–æ–≥–æ –±–æ–∫—É, —Ü–µ –≥–∞—Ä–Ω–∏–π –ø—Ä–∏–≤—ñ–¥ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤—ñ–π –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ —Å—Ç–∞—Ç–∏ —â–µ —à–≤–∏–¥—à–∏–º.{Environment.NewLine}{Environment.NewLine}" +
               $"üëé *{model.TracksSkipped} —Ç—Ä–µ–∫—ñ–≤* –±—É–ª–∏ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –≥–∞–Ω–µ–±–Ω—ñ, —â–æ –¥–æ–≤–µ–ª–æ—Å—å —ó—Ö –æ–¥—Ä–∞–∑—É –∑–∞–º—ñ–Ω–∏—Ç–∏.{Environment.NewLine}{Environment.NewLine}" +
               $"üëç –ê–ª–µ –≤–∞—à —É–ª—é–±–ª–µ–Ω–∏–π —Ç—Ä–µ–∫ —Ä–æ–∫—É:{Environment.NewLine}" +
               $"*{model.FavoriteTrack}*{Environment.NewLine}" +
               $"–¶–µ –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å –∑–∞ –≤–∞—à–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏!";

        var second = $"üë• –í –º–∏–Ω—É–ª–æ–º—É —Ä–æ—Ü—ñ —Ç—É—Ç –∑'—è–≤–ª—è–ª–∏—Å—å —ñ–º–µ–Ω–∞ *{model.TotalPilotCount}* –ø—ñ–ª–æ—Ç—ñ–≤.{Environment.NewLine}{Environment.NewLine}" +
                     $"ü•∑ *–ß–µ–º–ø—ñ–æ–Ω –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å: {model.PilotWhoCameTheMost.name}.* –¶–µ–π –≤—ñ–¥—á–∞–π–¥—É—Ö –ø—Ä–æ–ª–µ—Ç—ñ–≤ *{model.PilotWhoCameTheMost.count} —Ç—Ä–µ–∫—ñ–≤* –∑–∞ —Ä—ñ–∫!{Environment.NewLine}" +
                     $"{model.PilotWhoCameTheMost.name}, —Ç–∏ —Ç–æ—á–Ω–æ –ª—é–¥–∏–Ω–∞? ü§ñ{Environment.NewLine}{Environment.NewLine}" +
                     $"üßê *–ü—Ä–∏–∑ –∑–∞ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ –ø–æ—è–≤–∏: {model.PilotWhoCameTheLeast.name}* –í—ñ–Ω –∑'—è–≤–∏–≤—Å—è –≤—Å—å–æ–≥–æ {model.PilotWhoCameTheLeast.count} {UkrainianHelper.GetTimesString(model.PilotWhoCameTheLeast.count)}.{Environment.NewLine}" +
                     $"{model.PilotWhoCameTheLeast.name}, –º–∏ —Ç—É—Ç –±–µ–∑ —Ç–µ–±–µ —Å—É–º—É—î–º–æ!{Environment.NewLine}{Environment.NewLine}" +
                     $"ü•á *–ú—ñ—Å—Ç–µ—Ä –ó–æ–ª–æ—Ç–æ: {model.PilotWithTheMostGoldenMedal.name}.* –¶–µ–π –≥–µ–Ω—ñ–π –∑—ñ–±—Ä–∞–≤ *{model.PilotWithTheMostGoldenMedal.count}* –∑–æ–ª–æ—Ç–∏—Ö –º–µ–¥–∞–ª–µ–π!";

        var third = $"üèÜ –ê –æ—Å—å *–¢–û–ü-3* –ø—ñ–ª–æ—Ç—ñ–≤, —è–∫—ñ –Ω–∞–±—Ä–∞–ª–∏ –Ω–∞–π–±—ñ–ª—å—à—É —Å—É–º–∞—Ä–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –∑–∞ —Ä—ñ–∫:{Environment.NewLine}{Environment.NewLine}";

        foreach (var pilot in model.Top3Pilots)
        {
            third += $"*{pilot.Key}* - *{pilot.Value}* –±–∞–ª—ñ–≤{Environment.NewLine}";
        }

        third += $"{Environment.NewLine}–ù–µ–ø–æ–≥–∞–Ω–æ, –∞–≤–∂–µ–∂? –î—è–∫—É—î–º–æ, —â–æ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç–µ –ª—ñ—Ç–∞—Ç–∏ —ñ —Å—Ç–∞—î—Ç–µ —â–µ —à–≤–∏–¥—à–∏–º–∏! üöÄ";

        return new List<string>()
        {
            first,
            second,
            third
        };
    }

    public string DayStreakAchievement(Pilot pilot)
    {
        return pilot.DayStreak switch
        {
            10 or 20 => $"üéâ **{pilot.Name}** –º–∞—î –≤–∂–µ **{pilot.DayStreak}** day streak",
            50 => $"üéâ **{pilot.Name}** –¥–æ—Å—è–≥–Ω—É–≤ **{pilot.DayStreak}** day streak",
            75 => $"üéâ **{pilot.Name}** —Ç—Ä–∏–º–∞—î **{pilot.DayStreak}** day streak",
            100 => $"üéâ **{pilot.Name}** –ø–æ–¥–æ–ª–∞–≤ **{pilot.DayStreak}** day streak",
            150 => $"üéâ **{pilot.Name}** –ø–µ—Ä–µ—Ç–Ω—É–≤ **{pilot.DayStreak}** day streak",
            200 => $"üéâ **{pilot.Name}** –º–∞—î –Ω–µ–π–º–æ–≤—ñ—Ä–Ω—ñ **{pilot.DayStreak}** day streak",
            250 => $"üéâ **{pilot.Name}** –º–∞—î –≤–∂–µ **{pilot.DayStreak}** day streak",
            300 => $"üéâ **{pilot.Name}** –¥–æ—Å—è–≥–Ω—É–≤ –≤—Ä–∞–∂–∞—é—á–∏—Ö **{pilot.DayStreak}** day streak",
            365 => $"üéâ **{pilot.Name}** –≤—ñ–¥–∑–Ω–∞—á–∞—î **{pilot.DayStreak}** day streak. –¶—ñ–ª–∏–π —Ä—ñ–∫!",
            500 => $"üéâ **{pilot.Name}** –ø–æ–¥–æ–ª–∞–≤ **{pilot.DayStreak}** day streak. –¶–µ –≤–∞—É!",
            1000 => $"üéâ **{pilot.Name}** –º–∞—î –≤—Ä–∞–∂–∞—é—á—ñ **{pilot.DayStreak}** day streak",
            _ => string.Empty
        };
    }

    public string DayStreakPotentialLose(IEnumerable<Pilot> pilots)
    {
        var message = $"## ‚ö†Ô∏è –£–í–ê–ì–ê!{Environment.NewLine}" +
                      $"–ó–∞–≥—Ä–æ–∑–∞ –≤—Ç—Ä–∞—Ç–∏ day streak:{Environment.NewLine}{Environment.NewLine}";

        foreach (var pilot in pilots)
        {
            message += $"**{pilot.Name}** - **{pilot.DayStreak}** streak ({GetFreezieText(pilot.DayStreakFreezeCount)}){Environment.NewLine}";
        }

        message += $"{Environment.NewLine}–®–≤–∏–¥–µ–Ω—å–∫–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∏ —ñ –ª–µ—Ç—ñ—Ç—å! üöÄ" +
                   $"{Environment.NewLine}–£ –≤–∞—Å –º–µ–Ω—à–µ –≥–æ–¥–∏–Ω–∏.";

        return message;
    }

    #region Private

    private string TimeUpdate(TrackTimeDelta delta)
    {
        var timeChangePart = delta.TimeChange.HasValue ? $" ({MsToSec(delta.TimeChange.Value)}s)" : string.Empty;
        var rankOldPart = delta.RankOld.HasValue ? $" (#{delta.RankOld})" : string.Empty;
        var modelPart = delta.ModelName is not null ? $" / {delta.ModelName}" : string.Empty;

        return $"‚úàÔ∏è  **{delta.PlayerName}**{modelPart}{Environment.NewLine}" +
               $"‚è±Ô∏è  {MsToSec(delta.TrackTime)}s{timeChangePart} / #{delta.Rank}{rankOldPart}";
    }

    private List<string> TempLeaderboardRows(List<CompetitionResults> results)
    {
        var positionLength = results.Count().ToString().Length + 2;
        var pilotNameLength = results.Max(r => r.PlayerName.Length) + 2;
        var timeLength = results.Max(r => MsToSec(r.TrackTime).ToString().Length) + 3;
        var rows = new List<string>();

        foreach (var result in results)
        {
            rows.Add($"{FillWithSpaces(result.LocalRank, positionLength)}{FillWithSpaces(result.PlayerName, pilotNameLength)}{FillWithSpaces(MsToSec(result.TrackTime) + "s", timeLength)}{result.ModelName}");
        }

        return rows;
    }

    private string FillWithSpaces(object text, int length)
    {
        var textString = text.ToString();
        var spaces = new string(' ', length - textString.Length);
        return textString + spaces;
    }

    private string LeaderboardRow(CompetitionResults time)
    {
        var icon = time.LocalRank switch
        {
            1 => "ü•á",
            2 => "ü•à",
            3 => "ü•â",
            _ => $"#{time.LocalRank}"
        };

        return $"{icon} - **{time.PlayerName}** ({MsToSec(time.TrackTime)}s) / –ë–∞–ª—ñ–≤: **{time.Points}**";
    }

    private string TempSeasonResultsRow(SeasonResult result)
    {
        return $"{result.Rank} - **{result.PlayerName}** - {result.Points} –±–∞–ª—ñ–≤";
    }

    private string SeasonResultsRow(SeasonResult result)
    {
        var icon = result.Rank switch
        {
            1 => "ü•á",
            2 => "ü•à",
            3 => "ü•â",
            _ => $"#{result.Rank}"
        };

        return $"{icon} - **{result.PlayerName}** - {result.Points} –±–∞–ª—ñ–≤";
    }

    private string? MedalCountRow(SeasonResult result)
    {
        if (result is { GoldenCount: 0, SilverCount: 0, BronzeCount: 0 })
            return null;

        var medals = $"{MedalsRow("ü•á", result.GoldenCount)}{MedalsRow("ü•à", result.SilverCount)}{MedalsRow("ü•â", result.BronzeCount)}";
        return $"*{result.PlayerName}*:{Environment.NewLine}{medals}";
    }

    private string MedalsRow(string medalIcon, int count)
    {
        var result = new StringBuilder();

        for (var i = 0; i < count; i++)
        {
            result.Append(medalIcon);
        }

        return result.ToString();
    }

    private static string MsToSec(int ms) => (ms / 1000.0).ToString(CultureInfo.InvariantCulture);

    private static string GetFreezieText(int number) => number == 1 ? $"{number} freezie" : $"{number} freezies";

    #endregion
}
