using Veloci.Data.Domain;
using Veloci.Data.Repositories;
using Veloci.Logic.Bot.Telegram.Commands.Core;

namespace Veloci.Logic.Bot.Telegram.Commands;

public class DayStreakFreezesCommand : ITelegramCommand
{
    private readonly IRepository<Pilot> _pilots;

    public DayStreakFreezesCommand(IRepository<Pilot> pilots)
    {
        _pilots = pilots;
    }

    public string[] Keywords => ["/day-streak-freezes", "/dsf"];
    public string Description => "`/day-streak-freezes {pilotName}` –∞–±–æ `/dsf {pilotName}` - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ—Ä–æ–∑–æ–∫ —É –ø—ñ–ª–æ—Ç–∞";
    public async Task<string> ExecuteAsync(string[]? parameters)
    {
        if (parameters is null || parameters.Length == 0)
            return "–≤—Å–µ –¥–æ–±—Ä–µ, –∞–ª–µ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î —ñ–º–µ–Ω—ñ –ø—ñ–ª–æ—Ç–∞";

        var pilotName = string.Join(' ', parameters);
        var pilot = await _pilots.FindAsync(pilotName);

        return pilot is null
            ? $"–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –ø—ñ–ª–æ—Ç–∞ üòï"
            : $"–ó–∞–º–æ—Ä–æ–∑–æ–∫: {pilot.DayStreakFreezes}";
    }

    public bool RemoveMessageAfterDelay => false;
}
